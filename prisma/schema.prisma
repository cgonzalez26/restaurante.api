// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chain {
  id           String    @id @default(cuid())
  name         String
  branches     Branch[]
  updatedAt    DateTime? @updatedAt
  createdAt    DateTime  @default(now()) 
}

model Branch {
  id               String            @id @default(cuid())
  name             String  
  address          String
  extraAddress     String?
  city             String
  country          String?
  timezone         String?
  phone            String?
  email            String            @unique
  language         String?           @default("en")
  image            String?
  logo             String? 
  cuisine          String
  wifiName         String?
  wifiPwd          String?
  social           String[]          @default([]) 
  tables           Table[]
  notifications    Notification[]
  chain            Chain?            @relation(fields: [chainId], references: [id])
  chainId          String?
  users            User[]   
  modifierGroups   ModifierGroup[]
  branchoroducts   BranchProduct[]
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())  
}

model BranchProduct {
  id             String       @id @unique @default(cuid())
  branchId       String?
  branch         Branch?      @relation(fields: [branchId], references: [id])
  productId      String?
  product        Product?     @relation(fields: [productId], references: [id])
  updatedAt      DateTime?    @updatedAt
  createdAt      DateTime     @default(now())
}

model Role {
  id          String       @id @unique @default(cuid())
  name        String       @unique
  users       User[] 
  permissions Permission[]
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())
}

model PermissionType {
  id             String           @id @default(cuid())
  name           String
  permissions Permission[]
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())
}

model Permission {
  id        String   @id @unique @default(cuid())
  name      String   @unique
  roleId       String?
  roles        Role?     @relation(fields: [roleId], references: [id])
  permissiontypeId       String?
  permissiontype        PermissionType?     @relation(fields: [permissiontypeId], references: [id])
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())
}

model User {
  id           String     @id @default(cuid())
  name         String?
  email        String?    @unique
  image        String?
  phone        String?
  password     Password?
  color        String?
  tip          Decimal?
  paid         Decimal?
  roleId       String?
  roles        Role?     @relation(fields: [roleId], references: [id]) 
  branch       Branch?    @relation(fields: [branchId], references: [id])
  branchId     String?
  Payments     Payments[]
  usertables   UserTable[]
  sessions     Session[]
  preferencesclient PreferenceClient[]
  availabilities Availabilities[]
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())
}

model Session {
  id             String    @id @default(uuid())
  active         Boolean   @default(true)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
  updatedAt      DateTime? @updatedAt
  createdAt      DateTime  @default(now())
}

model Password {
  id         String    @id @default(cuid())
  hash       String
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String?   @unique
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())
}

model Table {
  id                String           @id @default(cuid())
  number            Int
  floorId           String?
  locationId        String?
  seats             Int? 
  active            Boolean?
  branch            Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branchId          String    
  usertables        UserTable[]
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())
}

model UserTable {
  id                String           @id @default(cuid())  
  table             Table            @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tableId           String  
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String 
  fedbacks          Feedback[]
  notifications     Notification[]
  orders            Order[]
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())
}

model Category {
  id             String           @id @default(cuid())
  name           String
  image          String?
  displayOrder   Int?
  description    String?
  pdf            Boolean?         @default(false) 
  active         Boolean?
  products       Product[] 
  availabilities Availabilities[]
  updatedAt      DateTime?        @updatedAt
  createdAt      DateTime         @default(now())
}

model Product {
  id             String          @id @default(cuid())
  plu            String?
  image          String
  name           String
  description    String
  //best name for turning off or on
  price          Decimal
  stock          Int?
  productType    ProductType? //Products 1, Modifiers 2, Modifier Groups 3, and Bundles 4
  available      Boolean
  categoryId     String?
  category       Category?       @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  orderdetails   OrderDetails[]
  combodetails   ComboDetails[]
  availabilities Availabilities[]
  branchproducts   BranchProduct[]
  updatedAt      DateTime?       @updatedAt
  createdAt      DateTime        @default(now())
}

model Availabilities {
  id         String     @id @default(cuid())
  dayOfWeek  Int?
  startTime  String?
  endTime    String?
  product    Product?   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  String?
  category   Category?  @relation(fields: [categoryId], references: [id])
  categoryId String? 
  user   User?  @relation(fields: [userId], references: [id])
  userId String?
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())
}

model Order {
  id            String         @id @default(cuid())
  status        StatusOrders?   @default(pending)
  tip           Decimal?
  paid          Boolean?
  total         Decimal?
  active        Boolean?
  usertable     UserTable?     @relation(fields: [usertableId], references: [id])
  usertableId   String?   
  tableNumber   Int?
  orderdetails  OrderDetails[]
  payments      Payments[] 
  notifications Notification[]
  updatedAt     DateTime?      @updatedAt
  createdAt     DateTime       @default(now())  
}

model OrderDetails {
  id    String  @id @default(cuid())
  plu   String?  
  price Float
  quantity         Int
  orderId          String?
  order            Order?            @relation(fields: [orderId], references: [id])
  productId        String?
  product          Product?          @relation(fields: [productId], references: [id]) 
  comments         String?
  paid             Boolean?          @default(false)
  paidBy           String?
  active           Boolean?  
  productModifiers ProductModifier[]
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())
}

model Payments {
  id           String         @id @default(cuid())
  method       PaymentMethod
  status       StatusPayments?  @default(pending)
  amount       Decimal
  tip          Decimal?
  total        Decimal?
  avoFee       Decimal? 
  active       Boolean?
  orderId      String?
  order        Order?         @relation(fields: [orderId], references: [id])
  userId       String?
  user         User?          @relation(fields: [userId], references: [id])  
  notifications Notification[]
  updatedAt    DateTime?      @updatedAt
  createdAt    DateTime       @default(now())
}

model Notification {
  id        String              @id @default(cuid())
  method    NotificationMethod?
  type      String?
  type_temp NotificationType?
  status    StatusNotification?
  message   String?
  branchId  String?
  branch    Branch?             @relation(fields: [branchId], references: [id])  
  usertableId    String?
  usertable      UserTable?               @relation(fields: [usertableId], references: [id])  
  orderId   String?
  order     Order?    @relation(fields: [orderId], references: [id])
  paymentId String?
  payment   Payments? @relation(fields: [paymentId], references: [id])
  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
}

model Combo{
  id            String              @id @default(cuid())
  name          String?
  dateFrom      DateTime?
  dateTo        DateTime?
  active        Boolean?
  combodetails  ComboDetails[]
  updatedAt     DateTime? @updatedAt
  createdAt     DateTime  @default(now())
}

model ComboDetails{
  id        String              @id @default(cuid())
  price     Float?
  quantity  Int?
  active    Boolean?
  productId String?
  product   Product?             @relation(fields: [productId], references: [id])
  comoboId  String?
  combo     Combo?             @relation(fields: [comoboId], references: [id])
  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
}

model Feedback{
  id            String              @id @default(cuid())
  description   String?
  active        Boolean?  
  feedbacktype  FeedbackType?
  usertableId   String?
  usertable     UserTable?             @relation(fields: [usertableId], references: [id])
  updatedAt     DateTime? @updatedAt
  createdAt     DateTime  @default(now()) 
}

model PreferenceClient{
  id                  String              @id @default(cuid())
  description         String?
  active              Boolean?  
  preferencetype      PreferenceType?
  userId   String?
  user     User?             @relation(fields: [userId], references: [id])
  updatedAt           DateTime? @updatedAt
  createdAt           DateTime  @default(now()) 
}

model ModifierGroup {
  id         String      @id @default(cuid())
  name       String?
  available  Boolean?    @default(true)
  plu        String?     @unique
  max        Int?        @default(0)
  min        Int?        @default(0)
  multiMax   Int?        @default(1)
  multiply   Int?        @default(0)
  active     Boolean?
  modifiers  Modifiers[]
  branch    Branch?   @relation(fields: [branchId], references: [id])
  branchId  String?
  updatedAt           DateTime? @updatedAt
  createdAt           DateTime  @default(now()) 
}

model Modifiers {
  id        String   @id @default(cuid())
  name      String?
  available Boolean? @default(true)
  plu             String?        @unique
  max             Int?           @default(0)
  min             Int?           @default(0)
  multiply        Int?           @default(0)
  extraPrice      Decimal?
  modifierGroups  ModifierGroup? @relation(fields: [modifierGroupId], references: [id])
  modifierGroupId String?  
  productmodifiers ProductModifier[]
  updatedAt       DateTime?      @updatedAt
  createdAt       DateTime       @default(now())
}

model ProductModifier {
  id            String    @id @default(cuid())
  name          String?
  quantity      Int?      @default(0)
  plu           String?   @unique
  extraPrice    Decimal?
  total         Decimal?
  orderdetails  OrderDetails? @relation(fields: [orderdetailId], references: [id])
  orderdetailId String?
  modifiers     Modifiers? @relation(fields: [modifierId], references: [id])
  modifierId    String?
  updatedAt     DateTime? @updatedAt
  createdAt     DateTime  @default(now())
}

enum PreferenceType {
  dietary_restrictions
  dishes
  payment_methods
}

enum FeedbackType {
   waiter
   manager 
   place
   dish
}

enum NotificationMethod {
  email
  sms
  push
  whatsapp
}

enum NotificationType {
  call
  order
  payment
  feedback
  informative
  other
}

enum PaymentMethod {
  cash
  card
  debitCard
  paypal
  applePay
  terminal
  other
}

enum StatusPayments {
  pending
  accepted
  rejected
  received
  completed
  disputed
}

enum StatusOrders {
  pending
  rejected
  completed
}

enum StatusNotification {
  pending
  rejected
  sending
}

enum ProductType {
  products
  modifiers
  modifiergroups
  bundles
}
